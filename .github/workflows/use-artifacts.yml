name: Use Artifacts

on: [push]

env:
  FILE_NAME: web-server

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Check out code
      uses: actions/checkout@v4

    - name: Build ${{ env.FILE_NAME }} for linux
      run: go build ${{ env.FILE_NAME }}.go

    - name: Build ${{ env.FILE_NAME }} for windows
      run: GOOS=windows GOARCH=amd64 go build ${{ env.FILE_NAME }}.go

    - name: Upload artifact for linux
      uses: actions/upload-artifact@v4
      with:
        name: linux
        path: ./${{ env.FILE_NAME }}

    - name: Upload artifact for windows
      uses: actions/upload-artifact@v4
      with:
        name: windows
        path: ./${{ env.FILE_NAME }}.exe

  test-linux:
    name: Test Linux
    runs-on: [ubuntu-latest]
    needs: [build]
    steps:

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: linux

    - name: Test ${{ env.FILE_NAME }}
      run: |
        chmod +x ./${{ env.FILE_NAME }}
        ./${{ env.FILE_NAME }} &
        sleep 1
        for i in Anakin Luke Leia Kylo Rey;
        do
          echo "$(date): $(curl -s http://localhost:8080/${i})"
        done

  test-windows:
    name: Test Windows
    runs-on: [windows-latest]
    needs: [build]
    steps:

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: windows

    - name: Test ${{ env.FILE_NAME }}.exe
      run: |
        Start-Process -FilePath ".\${{ env.FILE_NAME }}.exe" -NoNewWindow
        Start-Sleep -Seconds 1
        $names = @("Anakin", "Luke", "Leia", "Kylo", "Rey")
        foreach ($name in $names) {
          $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
          $response = Invoke-RestMethod -Uri "http://localhost:8080/$name" -Method Get
          Write-Output "${timestamp}: $response"
        }
